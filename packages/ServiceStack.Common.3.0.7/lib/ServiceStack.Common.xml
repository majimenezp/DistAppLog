<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Common</name>
    </assembly>
    <members>
        <member name="F:ServiceStack.ServiceModel.Serialization.DataContractDeserializer.quotas">
            <summary>
            Default MaxStringContentLength is 8k, and throws an exception when reached
            </summary>
        </member>
        <member name="M:ServiceStack.Common.StreamExtensions.Compress(System.String,System.String)">
            <summary>
            Compresses the specified text using the default compression method: Deflate
            </summary>
            <param name="text">The text.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.StreamExtensions.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the specified gz buffer using the default compression method: Inflate
            </summary>
            <param name="gzBuffer">The gz buffer.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.CommandsUtils.ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable{ServiceStack.DesignPatterns.Command.ICommandExec})">
            <summary>
            Provide the an option for the callee to block until all commands are executed
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandlerFactory">
            <summary>
            Encapsulates creating a new message handler
            </summary>
        </member>
        <member name="T:ServiceStack.Common.Extensions.EnumerableExtensions">
            <summary>
            These extensions have a potential to conflict with the LINQ extensions methods so
            leaving the implmentation in the 'Extensions' sub-namespace to force explicit opt-in
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.ServiceClientBase">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.GenericProxy`1">
            <summary>
            Generic Proxy for service calls.
            </summary>
            <typeparam name="T">The service Contract</typeparam>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.GenericProxy`1.Proxy">
            <summary>
            Returns the transparent proxy for the service call
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.Common.Utils.AssertUtils.AreNotNull(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="T:ServiceStack.Messaging.MessageHandler`1">
            <summary>
            Processes all messages in a Normal and Priority Queue.
            Expects to be called in 1 thread. i.e. Non Thread-Safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandler">
            <summary>
            Single threaded message handler that can process all messages
            of a particular message type.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.Process(ServiceStack.Messaging.IMessageQueueClient)">
            <summary>
            Process all messages pending
            </summary>
            <param name="mqClient"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.GetStats">
            <summary>
            Get Current Stats for this Message Handler
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageHandler.MessageType">
            <summary>
            The type of the message this handler processes
            </summary>
        </member>
        <member name="T:ServiceStack.Common.Extensions.IPAddressExtensions">
            <summary>
            Useful IPAddressExtensions from: 
            http://blogs.msdn.com/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Extensions.IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses">
            <summary>
            Gets the ipv4 addresses from all Network Interfaces that have Subnet masks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Extensions.IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses">
            <summary>
            Gets the ipv6 addresses from all Network Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Support.LogicFacadeBase.Execute``1(ServiceStack.DesignPatterns.Command.ICommand{``0})">
            <summary>
            Executes the specified action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Common.Support.LogicFacadeBase.CurrentContext">
            <summary>
            Gets the current context (or null if none).
            </summary>
        </member>
        <member name="P:ServiceStack.Common.Support.LogicFacadeBase.IsCurrentlyInitializeOnly">
            <summary>
            Checks if the current context is set to "initialize only".
            </summary>
        </member>
        <member name="F:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.initOptions">
            <summary>
            Determines whether this context is initialise only or not
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.#ctor(ServiceStack.Common.Support.LogicFacadeBase,ServiceStack.LogicFacade.InitOptions)">
            <summary>
            Constructs a new InitialiseOnlyContext
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.Dispose">
            <summary>
            Call to remove this current context and reveal the previous context (if any).
            </summary>
        </member>
        <member name="P:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.InitialisedObject">
            <summary>
            Gets or sets the object that has been initialized only.
            </summary>
        </member>
        <member name="T:ServiceStack.Validation.Validators.ValidEmailAttribute">
            <summary>
            Validates string is a valid email address.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.Validators.ValidationAttributeBase.Validate(System.Object)">
            <summary>
            Validates the specified value.
            
            If it is an error it returns an error code, otherwise null for success.
            
            Use ValidationErrorCode.Required.ToString() to set the error code
            </summary>
            <param name="value">The value.</param>
            <returns>ValidationErrorCode if InValid otherwise null</returns>
        </member>
        <member name="M:ServiceStack.Common.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the textual description of the enum if it has one. e.g.
            
            <code>
            enum UserColors
            {
                [Description("Bright Red")]
                BrightRed
            }
            UserColors.BrightRed.ToDescription();
            </code>
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Common.Support.InMemoryLogFactory">
            <summary>
            Note: InMemoryLog keeps all logs in memory, so don't use it long running exceptions
            
            Returns a thread-safe InMemoryLog which you can use while *TESTING*
            to provide a detailed analysis of your logs.
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.TypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.ValueUnTypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.TypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.ValueUnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.UnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="T:ServiceStack.Validation.ValidationResult">
            <summary>
            Encapsulates a validation result.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationResult.#ctor">
            <summary>
            Constructs a new ValidationResult
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationResult.#ctor(System.Collections.Generic.IList{ServiceStack.Validation.ValidationError})">
            <summary>
            Constructs a new ValidationResult
            </summary>
            <param name="errors">A list of validation results</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationResult.#ctor(System.Collections.Generic.IList{ServiceStack.Validation.ValidationError},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Validation.ValidationResult"/> class.
            </summary>
            <param name="errors">The errors.</param>
            <param name="successCode">The success code.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:ServiceStack.Validation.ValidationResult.SuccessCode">
            <summary>
            Gets or sets the success code.
            </summary>
            <value>The success code.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationResult.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationResult.SuccessMessage">
            <summary>
            Gets or sets the success message.
            </summary>
            <value>The success message.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationResult.Errors">
            <summary>
            The errors generated by the validation.
            </summary>
        </member>
        <member name="P:ServiceStack.Validation.ValidationResult.IsValid">
            <summary>
            Returns True if the validation was successful (errors list is empty).
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Utils.ReflectionUtils.PopulateObject(System.Object)">
            <summary>
            Populate an object with Example data.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.ReflectionUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj"></param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.FuncUtils.TryExec(System.Action)">
            <summary>
            Invokes the action provided and returns true if no excpetion was thrown.
            Otherwise logs the exception and returns false if an exception was thrown.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceModel.Support.XmlSerializerWrapper.GetNamespace(System.Type)">
            <summary>
            Gets the namespace from an attribute marked on the type's definition
            </summary>
            <param name="type"></param>
            <returns>Namespace of type</returns>
        </member>
        <member name="T:ServiceStack.ServiceModel.Serialization.StringMapTypeDeserializer">
            <summary>
            Serializer cache of delegates required to create a type from a string map (e.g. for REST urls)
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.TypedGetPropertyFn``1">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.ValueTypedGetPropertyFn``1">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.TypedSetPropertyFn``1">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.ValueTypesSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.UnTypedSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="T:ServiceStack.Common.UrnId">
            <summary>
            Creates a Unified Resource Name (URN) with the following formats:
            
            	- urn:{TypeName}:{IdFieldValue}						e.g. urn:UserSession:1
            	- urn:{TypeName}:{IdFieldName}:{IdFieldValue}		e.g. urn:UserSession:UserId:1			
            
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationException.ToXml">
            <summary>
            Used if we need to serialize this exception to XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Validation.ValidationException.ErrorCode">
            <summary>
            Returns the first error code
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:ServiceStack.Common.Support.AdapterBase">
            <summary>
            Common functionality when creating adapters
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.AdapterBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified expression. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Support.AdapterBase.Execute(System.Action)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.AsyncServiceClient">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="T:ServiceStack.Net30.ExtendTuple">
            <summary>
            Helper extensions for tuples
            </summary>
        </member>
    </members>
</doc>
